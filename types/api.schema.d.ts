/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /**
     * Get Last Accounts
     * @description Displays a list of latest accounts.
     */
    get: operations["accountsList.getLatest"];
  };
  "/steam": {
    /**
     * Steam
     * @description Displays a list of accounts in a specific category according to your parameters.
     *
     * CS2 map list for rank filter:
     *
     * + 1 - Dust II
     * + 2 - Mirage
     * + 3 - Train
     * + 4 - Nuke
     * + 5 - Overpass
     * + 6 - Inferno
     * + 7 - Ancient
     * + 8 - Vertigo
     * + 9 - Anubis
     * + 10 - Office
     */
    get: operations["accountsList.getListSteam"];
  };
  "/fortnite": {
    /**
     * Fortnite
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListFortnite"];
  };
  "/vkontakte": {
    /**
     * Vkontakte
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListVkontakte"];
  };
  "/genshin-impact": {
    /**
     * Genshin Impact
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListGenshinImpact"];
  };
  "/valorant": {
    /**
     * Valorant
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListValorant"];
  };
  "/league-of-legends": {
    /**
     * League of Legends
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListLoL"];
  };
  "/telegram": {
    /**
     * Telegram
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListTelegram"];
  };
  "/supercell": {
    /**
     * Supercell
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListSupercell"];
  };
  "/origin": {
    /**
     * Origin
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListOrigin"];
  };
  "/world-of-tanks": {
    /**
     * World of Tanks
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListWoT"];
  };
  "/wot-blitz": {
    /**
     * WoT Blitz
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListWoTBlitz"];
  };
  "/epicgames": {
    /**
     * Epic Games
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListEpicGames"];
  };
  "/escape-from-tarkov": {
    /**
     * Escape from Tarkov
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListEscapeFromTarkov"];
  };
  "/socialclub": {
    /**
     * Social Club
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListSocialClub"];
  };
  "/uplay": {
    /**
     * Uplay
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListUplay"];
  };
  "/war-thunder": {
    /**
     * War Thunder
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListWarThunder"];
  };
  "/discord": {
    /**
     * Discord
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListDiscord"];
  };
  "/tiktok": {
    /**
     * TikTok
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListTikTok"];
  };
  "/instagram": {
    /**
     * Instagram
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListInstagram"];
  };
  "/battlenet": {
    /**
     * BattleNet
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListBattleNet"];
  };
  "/vpn": {
    /**
     * VPN
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListVpn"];
  };
  "/cinema": {
    /**
     * Cinema
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListCinema"];
  };
  "/spotify": {
    /**
     * Spotify
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListSpotify"];
  };
  "/warface": {
    /**
     * Warface
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListWarface"];
  };
  "/youtube": {
    /**
     * Youtube
     * @description Displays a list of accounts in a specific category according to your parameters.
     */
    get: operations["accountsList.getListYoutube"];
  };
  "/user/{userId}/items": {
    /**
     * Get User Accounts List
     * @description Displays a list of owned accounts.
     *
     * Category id-names list:
     * + 1 - steam - **Steam**
     * + 2 - vkontakte - **VK**
     * + 3 - origin - **Origin**
     * + 4 - warface - **Warface**
     * + 5 - uplay - **Uplay**
     * + 7 - socialclub - **Social Club**
     * + 9 - fortnite - **Fortnite**
     * + 10 - instagram - **Instagram**
     * + 11 - battlenet - **Battle.net**
     * + 12 - epicgames - **Epic Games**
     * + 13 - valorant - **Valorant**
     * + 14 - world-of-tanks - **World Of Tanks**
     * + 16 - wot-blitz - **World Of Tanks Blitz**
     * + 15 - supercell - **Supercell**
     * + 17 - genshin-impact - **Genshin Impact**
     * + 18 - escape-from-tarkov - **Escape From Tarkov**
     * + 19 - vpn - **VPN**
     * + 20 - tiktok - **TikTok**
     * + 22 - discord - **Discord**
     * + 23 - cinema - **Online Cinema**
     * + 24 - telegram - **Telegram**
     * + 25 - youtube - **YouTube**
     * + 26 - spotify - **Spotify**
     * + 27 - war-thunder - **War Thunder**
     */
    get: operations["accountsList.getOwned"];
  };
  "/user/{userId}/orders": {
    /**
     * Get All Purchased Accounts
     * @description Displays a list of purchased accounts.
     *
     * Category id-names list:
     * + 1 - steam - **Steam**
     * + 2 - vkontakte - **VK**
     * + 3 - origin - **Origin**
     * + 4 - warface - **Warface**
     * + 5 - uplay - **Uplay**
     * + 7 - socialclub - **Social Club**
     * + 9 - fortnite - **Fortnite**
     * + 10 - instagram - **Instagram**
     * + 11 - battlenet - **Battle.net**
     * + 12 - epicgames - **Epic Games**
     * + 13 - valorant - **Valorant**
     * + 14 - world-of-tanks - **World Of Tanks**
     * + 16 - wot-blitz - **World Of Tanks Blitz**
     * + 15 - supercell - **Supercell**
     * + 17 - genshin-impact - **Genshin Impact**
     * + 18 - escape-from-tarkov - **Escape From Tarkov**
     * + 19 - vpn - **VPN**
     * + 20 - tiktok - **TikTok**
     * + 22 - discord - **Discord**
     * + 23 - cinema - **Online Cinema**
     * + 24 - telegram - **Telegram**
     * + 25 - youtube - **YouTube**
     * + 26 - spotify - **Spotify**
     * + 27 - war-thunder - **War Thunder**
     */
    get: operations["accountsList.getPurchased"];
  };
  "/fave": {
    /**
     * Get All Favourites Accounts
     * @description Displays a list of favourites accounts.
     */
    get: operations["accountsList.getFavorite"];
  };
  "/viewed": {
    /**
     * Get All Viewed Accounts
     * @description Displays a list of viewed accounts.
     */
    get: operations["accountsList.getViewed"];
  };
  "/{itemId}": {
    /**
     * Get Info Account
     * @description Displays account information.
     */
    get: operations["accountsList.getInformation"];
    /**
     * Soft Delete Account
     * @description Deletes your account from public search. Deletion type is soft. You can restore account after deletion if you want.
     */
    delete: operations["accountsManaging.delete"];
  };
  "/{itemId}/steam-preview": {
    /**
     * Get Steam Acc Html
     * @description Returns Steam account html code.
     */
    get: operations["accountsList.getSteamHtml"];
  };
  "/{categoryName}/params": {
    /**
     * Get Search Category
     * @description Displays search parameters for a category.
     */
    get: operations["accountsList.getSearchCategory"];
  };
  "/{categoryName}/games": {
    /**
     * Get Games Category
     * @description Displays a list of games in the category.
     */
    get: operations["accountsList.getGamesCategory"];
  };
  "/{itemId}/auction": {
    /**
     * Get Auction
     * @description Display a list of bids in the auction.
     */
    get: operations["auction.get"];
  };
  "/{itemId}/auction/bid": {
    /**
     * Post Auction Bid
     * @description Create a new auction bid.
     */
    post: operations["auction.postBid"];
    /**
     * Delete Auction Bid
     * @description Delete your auction bid. You can delete your auction bid within 5 minutes.
     */
    delete: operations["auction.deleteBid"];
  };
  "/steam-value": {
    /**
     * Get Steam Value
     * @description Gets steam value.
     *
     * Application id list:
     * + **730** - CS2
     * + **578080** - PUBG
     * + **753** - Steam
     * + **570** - Dota 2
     * + **440** - Team Fortress 2
     * + **252490** - Rust
     * + **304930** - Unturned
     * + **304930** - Unturned
     * + **232090** - Killing Floor 2
     * + **322330** - Don't Starve Together
     */
    get: operations["accountsManaging.getSteamValue"];
  };
  "/{itemId}/fast-buy": {
    /**
     * Buy Account
     * @description Check and buy account.
     */
    post: operations["accountsPurchasing.checkBuy"];
  };
  "/{itemId}/reserve": {
    /**
     * Set Reserve Account
     * @description Reserves account for you. Reserve time - 300 seconds.
     */
    post: operations["accountsPurchasing.setReserve"];
  };
  "/{itemId}/cancel-reserve": {
    /**
     * Cancel Reserve Account
     * @description Cancels reserve.
     */
    post: operations["accountsPurchasing.cancelReserve"];
  };
  "/{itemId}/check-account": {
    /**
     * Check Account
     * @description Checking account for validity. If the account is invalid, the purchase will be canceled automatically (you don't need to make request **POST /:itemId/cancel-reserve**).
     */
    post: operations["accountsPurchasing.check"];
  };
  "/{itemId}/confirm-buy": {
    /**
     * Confirm Buy
     * @description Confirm buy.
     */
    post: operations["accountsPurchasing.confirmBuy"];
  };
  "/balance/transfer": {
    /**
     * Send Money
     * @description Send money to any user.
     *
     * The web version additionally has a **redirect** parameter (After payment, there will be a redirect to the specified link).
     */
    post: operations["paymentsList.sendMoney"];
  };
  "/user/{userId}/payments": {
    /**
     * History Payments
     * @description Displays list of your payments.
     */
    get: operations["paymentsList.history"];
  };
  "/item/fast-sell": {
    /**
     * Fast Sell Account
     * @description Adds and check account on validity. If account is valid, account will be published on the market.
     *
     * Account origin. Where did you get it from.
     * + brute - Account received using Bruteforce
     * + fishing - Account received from fishing page
     * + stealer - Account received from stealer logs
     * + autoreg - Account is automatically registered by a tool
     * + personal - Account is yours. You created it yourself
     * + resale - Account received from another seller
     * + retrive - Account is recovered by email or phone (only for VKontakte category)
     * + dummy - Dummy (empty) account (only for Steam category)
     *
     * Required email login data categories:
     * + 9 - Fortnite
     * + 12 - Epic games
     * + 18 - Escape from Tarkov
     */
    post: operations["accountPublishing.fastSell"];
  };
  "/item/add": {
    /**
     * Create Account Item
     * @description Adds account on the market.
     *
     * Account origin. Where did you get it from.
     * + brute - Account received using Bruteforce
     * + fishing - Account received from fishing page
     * + stealer - Account received from stealer logs
     * + autoreg - Account is automatically registered by a tool
     * + personal - Account is yours. You created it yourself
     * + resale - Account received from another seller
     * + retrive - Account is recovered by email or phone (only for VKontakte category)
     * + dummy - Dummy (empty) account (only for Steam category)
     *
     * Required email login data categories:
     * + 9 - Fortnite
     * + 12 - Epic games
     * + 18 - Escape from Tarkov
     */
    post: operations["accountPublishing.addItem"];
  };
  "/{itemId}/goods/check": {
    /**
     * Check Not Published Acc (Get temp email for acccount)
     * @description Check and put up to sale not published account OR update account information existing account.
     */
    post: operations["accountsPublishing.checkNotPublic"];
  };
  "/{itemId}/goods/add": {
    /**
     * Get Info Not Published Acc
     * @description Get info about not published item. For categories, which required temporary email (Steam, Social Club), you will get temporary email in response.
     */
    get: operations["accountsPublishing.getInfoNotPublic"];
  };
  "/category": {
    /**
     * Get Categories
     * @description Display category list.
     */
    get: operations["accountsPublishing.getCategories"];
  };
  "/{itemId}/mafile": {
    /**
     * Get Mafile Json
     * @description Returns mafile in JSON. Warning: this action is cancelling active account guarantee.
     */
    get: operations["accountsManaging.getMafileJSON"];
  };
  "/{itemId}/email-code": {
    /**
     * Get Email Confirmation Code
     * @description Gets confirmation code or link.
     */
    get: operations["accountsManaging.getEmailCode"];
  };
  "/{itemId}/guard-code": {
    /**
     * Get Mafile Confirmation Code
     * @description Gets confirmation code from MaFile (Only for Steam accounts).
     */
    get: operations["accountsManaging.getMafileCode"];
  };
  "/{itemId}/telegram-login-code": {
    /**
     * Get Telegram Confirmation Code
     * @description Gets confirmation code from Telegram.
     */
    get: operations["accountsManaging.getTelegramCode"];
  };
  "/{itemId}/telegram-reset-authorizations": {
    /**
     * Telegram Reset Auth
     * @description Resets Telegram authorizations.
     */
    post: operations["accountsManaging.telegramResetAuth"];
  };
  "/{itemId}/refuse-guarantee": {
    /**
     * Cancel Guarantee Acc
     * @description Cancel guarantee of account. It can be useful for account reselling.
     */
    post: operations["accountsManaging.cancelGuarantee"];
  };
  "/{itemId}/change-password": {
    /**
     * Change Password
     * @description Changes password of account.
     */
    post: operations["accountsManaging.changePassword"];
  };
  "/{itemId}/temp-email-password": {
    /**
     * Get Password Temp Email
     * @description Gets password from temp email of account. After calling of this method, the warranty will be cancelled and you cannot automatically resell account.
     */
    get: operations["accountsManaging.getPasswordEmail"];
  };
  "/{itemId}/edit": {
    /**
     * Edit Account
     * @description Edits any details of account.
     *
     * Account origin. Where did you get it from.
     * + brute - Account received using Bruteforce
     * + fishing - Account received from fishing page
     * + stealer - Account received from stealer logs
     * + autoreg - Account is automatically registered by a tool
     * + personal - Account is yours. You created it yourself
     * + resale - Account received from another seller
     * + retrive - Account is recovered by email or phone (only for VKontakte category)
     * + dummy - Dummy (empty) account (only for Steam category)
     */
    put: operations["accountsManaging.edit"];
  };
  "/{itemId}/tag": {
    /**
     * Add Tag Account
     * @description Adds tag for the account.
     */
    post: operations["accountsManaging.addTag"];
    /**
     * Delete Tag Account
     * @description Deletes tag for the account.
     */
    delete: operations["accountsManaging.deleteTag"];
  };
  "/{itemId}/bump": {
    /**
     * Bumps Account
     * @description Bumps account in the search.
     */
    post: operations["accountsManaging.bump"];
  };
  "/{itemId}/star": {
    /**
     * Add Favorite
     * @description Adds account to favourites.
     */
    post: operations["accountsManaging.addFavorite"];
    /**
     * Delete Favorite
     * @description Deletes account from favourites.
     */
    delete: operations["accountsManaging.deleteFavorite"];
  };
  "/{itemId}/stick": {
    /**
     * Stick Account
     * @description Stick account in the top of search.
     */
    post: operations["accountsManaging.stick"];
    /**
     * Unstick Account
     * @description Unstick account of the top of search.
     */
    delete: operations["accountsManaging.unstick"];
  };
  "/{itemId}/change-owner": {
    /**
     * Change Account Owner
     * @description Change of account owner.
     */
    post: operations["accountsManaging.changeOwner"];
  };
  "/me": {
    /**
     * Get Profile Market
     * @description Displays info about your profile.
     */
    get: operations["marketProfileSettings.getInfo"];
    /**
     * Edit Settings Market
     * @description Change settings about your profile on the market.
     */
    put: operations["marketProfileSettings.getSettings"];
  };
  "/proxy": {
    /**
     * Get Proxy
     * @description Gets your proxy list.
     */
    get: operations["proxySettings.get"];
    /**
     * Add Proxy
     * @description Add single proxy or proxy list.
     *
     *
     * To add single proxy use this parameters:
     *
     *
     * + **proxy_ip** (required) - proxy ip or host
     * + **proxy_port** (required) - proxy port
     * + **proxy_user** (optional) - proxy username
     * + **proxy_pass** (optional) - proxy password
     *
     * To add proxy list use this parameters:
     *
     *
     * + **proxy_row** (required) - proxy list in String format ip:port:user:pass. Each proxy must be start with new line (use
     *  separator)
     */
    post: operations["proxySettings.add"];
    /**
     * Delete Proxy
     * @description Delete single or all proxies.
     */
    delete: operations["proxySettings.delete"];
  };
  "/batch": {
    /**
     * Batch
     * @description Execute multiple API requests at once (Separated by comma). Maximum batch jobs is 10.
     *
     * Required scopes:
     * + Same as called API requests.
     */
    post: operations["batchRequests.execute"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AccountListModel */
    AccountListModel: {
      /** Items */
      items: string[];
      /** Totalitems */
      totalItems: number;
      /** Totalitemsprice */
      totalItemsPrice: number;
      /** Perpage */
      perPage: number;
      /** Page */
      page: number;
      /** Searchurl */
      searchUrl: string;
    };
    /** Auction */
    AuctionModel: {
      /** item Id */
      itemId?: number;
      /** Bids */
      bids?: components["schemas"]["AuctionBidModel"][];
      /** Is Finished */
      is_finished?: number;
      /** End Time */
      endTime?: number;
      /** Currencies */
      currencies?: {
        "{currency}"?: components["schemas"]["AuctionCurrencyModel"];
      };
      /** User Currency */
      userCurrency?: string;
      minAllowedBidValue?: components["schemas"]["AuctionBidValueModel"];
      startValue?: components["schemas"]["AuctionBidValueModel"];
      system_info?: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** Bid */
    AuctionBidModel: {
      /** Bid Id */
      bid_id?: number;
      bid_value?: components["schemas"]["AuctionBidValueTextModel"];
      minAllowedBidValue?: components["schemas"]["AuctionBidValueModel"];
      bid_previous_value?: components["schemas"]["AuctionBidValueTextModel"];
      user?: components["schemas"]["AuctionUserModel"];
      /** Bid Date */
      bid_date?: number;
      /**
       * Can Cancel Bid
       * @default false
       */
      canCancelBid?: boolean;
      /** End Time Auction */
      endTimeAuction?: number;
    };
    /** Auction New Bid */
    AuctionBidNewModel: {
      /**
       * Status
       * @default ok
       */
      status?: string;
      bid?: components["schemas"]["AuctionBidModel"];
      system_info?: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** Auction Error Time Expired */
    AuctionErrorTimeExpiredModel: {
      /** Errors */
      errors?: string[];
      system_info?: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** Auction Bid Delete */
    AuctionBidDeleteModel: {
      /**
       * Status
       * @default ok
       */
      status?: string;
      /**
       * Message
       * @default The bid success deleted
       */
      message?: string;
      system_info?: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** Auction Error Last Bid */
    AuctionErrorLastBidModel: {
      /** Errors */
      errors?: string[];
      system_info?: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** Auction User */
    AuctionUserModel: {
      /** User Id */
      user_id?: number;
      /** Avatar */
      avatar?: string;
      /** Username Html */
      usernameHtml?: string;
    };
    /** Bid Value */
    AuctionBidValueModel: {
      /** rub */
      rub?: number;
      /** uah */
      uah?: number;
      /** kzt */
      kzt?: number;
      /** byn */
      byn?: number;
      /** usd */
      usd?: number;
      /** eur */
      eur?: number;
      /** gbp */
      gbp?: number;
      /** cny */
      cny?: number;
      /** try */
      try?: number;
    };
    /** Bid Value */
    AuctionBidValueTextModel: {
      /** rub */
      rub?: string;
      /** uah */
      uah?: string;
      /** kzt */
      kzt?: string;
      /** byn */
      byn?: string;
      /** usd */
      usd?: string;
      /** eur */
      eur?: string;
      /** gbp */
      gbp?: string;
      /** cny */
      cny?: string;
      /** try */
      try?: string;
    };
    /** Auction Currency */
    AuctionCurrencyModel: {
      /** Title */
      title?: string;
      /** Symbol */
      symbol?: string;
      rate?: components["schemas"]["AuctionRateModel"];
    };
    /** Auction Rate */
    AuctionRateModel: {
      /** Value */
      Value?: number;
      /** Nominal */
      Nominal?: number;
    };
    /** AddGoodsModel */
    AddGoodsModel: {
      /** Status */
      status: string;
      item: components["schemas"]["GoodsItem"];
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
      /** Temp Email */
      temp_email: string;
      /** Sessionlogindata */
      sessionLoginData: unknown[];
      /** Ignorecookieupload */
      ignoreCookieUpload: boolean;
    };
    /** AddTagModel */
    AddTagModel: {
      /** Itemid */
      itemId: number;
      tag: components["schemas"]["Tag"];
      /** Addedtagid */
      addedTagId: number;
      /** Deletetags */
      deleteTags: number[];
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** BatchModel */
    BatchModel: components["schemas"]["BatchJobModel"][];
    /** Category */
    Category: {
      /** Category Id */
      category_id: number;
      /** Category Title */
      category_title: string;
      /** Category Description */
      category_description: string;
      links: components["schemas"]["Links"];
      permissions: components["schemas"]["Permissions"];
    };
    /** Categories */
    Categories: {
      0?: components["schemas"]["Category"];
      system_info: components["schemas"]["forum_api__schemas__categories__SystemInfo"];
    };
    /** CategoryModel */
    CategoryModel: {
      category: components["schemas"]["Category"];
      system_info: components["schemas"]["forum_api__schemas__categories__SystemInfo"];
    };
    /** ChangePasswordModel */
    ChangePasswordModel: {
      /**
       * Status
       * @default ok
       */
      status?: string;
      /**
       * Message
       * @default Changes Saved
       */
      message?: string;
      /** New Password */
      new_password: string;
    };
    /** CheckAccBuyModel */
    CheckAccBuyModel: {
      /**
       * Status
       * @default ok
       */
      status?: string;
      item: components["schemas"]["market_api__schemas__items__fast_buy__Item"];
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** CodeData */
    CodeData: {
      /** Code */
      code: string;
      /** Date */
      date: number;
      /** Textplain */
      textPlain: string;
    };
    /** ConfCodeItem */
    ConfCodeItem: {
      /** Account */
      account: string;
    };
    /** AddItemModel */
    AddItemModel: {
      /**
       * Status
       * @default ok
       */
      status: string;
      item: components["schemas"]["GoodsItem"];
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** FastSellModel */
    FastSellModel: {
      /**
       * Status
       * @default ok
       */
      status: string;
      /** Message */
      message: string;
      item: components["schemas"]["GoodsItem"];
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** ConfCodeModel */
    ConfCodeModel: {
      item: components["schemas"]["ItemsModel"];
      codeData: components["schemas"]["CodeData"];
    };
    /** TgCodeModel */
    TgCodeModel: {
      item: components["schemas"]["ItemsModel"];
      codes: components["schemas"]["TgCodeData"];
    };
    /** TgCodeData */
    TgCodeData: {
      /** Code */
      code?: string;
      /** Date */
      date?: number;
    };
    /** ConfirmBuyModel */
    ConfirmBuyModel: {
      /**
       * Status
       * @default ok
       */
      status?: string;
      /** Reserve End Date */
      reserve_end_date: number;
      item: components["schemas"]["ItemLoginData"];
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** FastBuyModel */
    FastBuyModel: {
      /**
       * Status
       * @default ok
       */
      status?: string;
      /** Reserve End Date */
      reserve_end_date: number;
      item: components["schemas"]["market_api__schemas__items__fast_buy__Item"];
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** Game */
    Game: {
      /** App Id */
      app_id: string;
      /** Title */
      title: string;
      /** Abbr */
      abbr: string;
      /** Category Id */
      category_id: number;
      /** Img */
      img: string;
      /** Url */
      url: string;
      /** Ru */
      ru: string[];
    };
    /** GamesModel */
    GamesModel: {
      /** Games */
      games: components["schemas"]["Game"][];
      /** Isisolatedmarket */
      isIsolatedMarket: boolean;
      /** Isisolatedmarketalt */
      isIsolatedMarketAlt: boolean;
      system_info: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** GoodsItem */
    GoodsItem: {
      /** Item Id */
      item_id: number;
      /** Item State */
      item_state: string;
    };
    /** HistoryPaymentsModel */
    HistoryPaymentsModel: {
      payments: components["schemas"]["Payments"];
      /** Hasnextpage */
      hasNextPage: boolean;
      /** Lastoperationid */
      lastOperationId: number;
      /** Nextpagehref */
      nextPageHref: string;
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    SteamValueModel: {
      query?: string;
      data?: components["schemas"]["SteamValueData"];
      appId?: number;
      isIsolatedMarket?: boolean;
      isIsolatedMarketAlt?: boolean;
      system_info?: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    SteamValueData: {
      items?: string[];
      appId?: number;
      appTitle?: string;
      totalValue?: number;
      itemCount?: number;
      marketableItemCount?: number;
      currency?: string;
      currencyIcon?: string;
      language?: string;
      time?: number;
    };
    /** ItemLoginData */
    ItemLoginData: {
      loginData: components["schemas"]["LoginData"];
    };
    /** ItemsModel */
    ItemsModel: {
      item: components["schemas"]["market_api__schemas__account_list__Item"];
      seller: components["schemas"]["Seller"];
    };
    /** JobId */
    JobId: Record<string, never>;
    /** Jobs */
    Jobs: {
      job_id: components["schemas"]["JobId"];
    };
    /** JobsModel */
    JobsModel: {
      jobs: components["schemas"]["Jobs"];
    };
    /** Links */
    Links: {
      /** Permalink */
      permalink: string;
      /** Detail */
      detail: string;
      /** Sub-Categories */
      "sub-categories": string;
      /** Sub-Forums */
      "sub-forums": string;
    };
    /** LoginData */
    LoginData: {
      /** Raw */
      raw: string;
      /** Encodedraw */
      encodedRaw: string;
      /** Login */
      login: string;
      /** Password */
      password: string;
      /** Encodedpassword */
      encodedPassword: string;
      /** Oldpassword */
      oldPassword: string;
      /** Encodedoldpassword */
      encodedOldPassword: string;
      /** Advicetochangepassword */
      adviceToChangePassword: boolean;
    };
    /** MaFileModel */
    MaFileModel: {
      /** Mafile */
      maFile: Record<string, never>;
    };
    /** MeModel */
    MeModel: {
      user: components["schemas"]["User"];
    };
    /** Batch Job */
    BatchJobModel: {
      /**
       * Id
       * @description identifier for the job, will be use in output as key of a result set. If this parameter is not set, the URI will be used.
       */
      id?: string;
      /**
       * Uri
       * @description URI of the API request to execute.
       */
      uri: string;
      /**
       * Method
       * @description HTTP method of the API request to execute. If this parameter is not set, GET HTTP method will be used.
       */
      method?: string;
      params?: components["schemas"]["BatchJobParams"];
    };
    /** MoneyTransferModel */
    MoneyTransferModel: {
      /**
       * Status
       * @default ok
       */
      status?: string;
      /** Message */
      message: string;
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** No Permission */
    NoPermissionModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** Ad Not Found */
    AdNotFoundModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** Incorrect Proxy */
    IncorrectProxyModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** Captcha error */
    CaptchaErrorModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** Market Error */
    ErrorModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** Item is Sold */
    SoldItemModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** Tag Not Found */
    TagNotFoundModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** Page Not Found */
    PageNotFoundModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** Invalid Batch */
    InvalidBatchModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** Proxy Not Found */
    ProxyNotFoundModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** No Temp Mail */
    NoTempMailModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** Invalid Secret Answer */
    InvalidSAModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /** User Not Found */
    UserNotFoundModel: {
      errors?: string[];
      system_info?: components["schemas"]["market_api__schemas__items__game__SystemInfo"];
    };
    /**
     * Params
     * @description parameters of the API request to execute.
     */
    BatchJobParams: {
      /** @default value */
      name?: string;
    };
    /** Payments */
    Payments: {
      /** Payment */
      payment: string;
    };
    /** Permissions */
    Permissions: {
      /** View */
      view: boolean;
      /** Edit */
      edit: boolean;
      /** Delete */
      delete: boolean;
    };
    /** Proxy */
    Proxy: {
      proxy: components["schemas"]["Proxy1"];
    };
    /** Proxy1 */
    Proxy1: {
      /** Proxy Id */
      proxy_id: number;
      /** User Id */
      user_id: number;
      /** Proxy Ip */
      proxy_ip: string;
      /** Proxy Port */
      proxy_port: number;
      /** Proxy User */
      proxy_user: string;
      /** Proxy Pass */
      proxy_pass: string;
      /** Proxystring */
      proxyString: string;
    };
    /** ProxyModel */
    ProxyModel: {
      /** Proxies */
      proxies: components["schemas"]["Proxy"][];
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** ReserveBuyModel */
    ReserveBuyModel: {
      /**
       * Status
       * @default ok
       */
      status?: string;
      /** Reserve End Date */
      reserve_end_date: number;
      item: components["schemas"]["market_api__schemas__items__fast_buy__Item"];
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** SaveChangesModel */
    SaveChangesModel: {
      /**
       * Status
       * @default ok
       */
      status?: string;
      /**
       * Message
       * @default Changes Saved
       */
      message?: string;
    };
    /** Seller */
    Seller: {
      /** User Id */
      user_id: number;
      /** Username */
      username: string;
      /** Avatar Date */
      avatar_date: number;
      /** User Group Id */
      user_group_id: number;
      /** Secondary Group Ids */
      secondary_group_ids: string;
      /** Display Style Group Id */
      display_style_group_id: number;
      /** Uniq Username Css */
      uniq_username_css: string;
    };
    /** Tag */
    Tag: {
      /** Tag Id */
      tag_id: number;
      /** Title */
      title: string;
      /** Isdefault */
      isDefault: boolean;
      /** Forownedaccountsonly */
      forOwnedAccountsOnly: boolean;
      /** Bc */
      bc: string;
    };
    /** TempEmailPasswordItem */
    TempEmailPasswordItem: {
      /** Account */
      account: string;
    };
    /** TempEmailPasswordModel */
    TempEmailPasswordModel: {
      item: components["schemas"]["TempEmailPasswordItem"];
    };
    /** User */
    User: {
      /** User Id */
      user_id: number;
      /** Username */
      username: string;
      /** User Message Count */
      user_message_count: number;
      /** User Register Date */
      user_register_date: number;
      /** User Like Count */
      user_like_count: number;
      /** Short Link */
      short_link: string;
      /** User Email */
      user_email: string;
      /** User Unread Notification Count */
      user_unread_notification_count: number;
      /** User Dob Day */
      user_dob_day: number;
      /** User Dob Month */
      user_dob_month: number;
      /** User Dob Year */
      user_dob_year: number;
      /** User Title */
      user_title: string;
      /** User Last Seen Date */
      user_last_seen_date: number;
      /** Balance */
      balance: number;
      /** Hold */
      hold: number;
      system_info: components["schemas"]["forum_api__schemas__base__SystemInfo"];
    };
    /** SystemInfo */
    forum_api__schemas__base__SystemInfo: {
      /** Visitor Id */
      visitor_id: number;
      /** Time */
      time: number;
    };
    /** SystemInfo */
    forum_api__schemas__categories__SystemInfo: {
      /** Visitor Id */
      visitor_id: number;
      /** Time */
      time: number;
    };
    /** Item */
    market_api__schemas__account_list__Item: {
      /** Item Id */
      item_id: number;
      /** Item State */
      item_state: string;
      /** Published Date */
      published_date: string;
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Price */
      price: number;
      /** Update Stat Date */
      update_stat_date: number;
      /** Refreshed Date */
      refreshed_date: number;
      /** Login */
      login: string;
      /** Temp Email */
      temp_email: string;
      /** View Count */
      view_count: number;
      /** Information */
      information: string;
      /** Item Origin */
      item_origin: string;
    };
    /** Item */
    market_api__schemas__items__fast_buy__Item: {
      /** Account */
      account: string;
    };
    /** SystemInfo */
    market_api__schemas__items__game__SystemInfo: {
      /** Visitor Id */
      visitor_id: number;
      /** Time */
      time: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Get Last Accounts
   * @description Displays a list of latest accounts.
   */
  "accountsList.getLatest": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Steam
   * @description Displays a list of accounts in a specific category according to your parameters.
   *
   * CS2 map list for rank filter:
   *
   * + 1 - Dust II
   * + 2 - Mirage
   * + 3 - Train
   * + 4 - Nuke
   * + 5 - Overpass
   * + 6 - Inferno
   * + 7 - Ancient
   * + 8 - Vertigo
   * + 9 - Anubis
   * + 10 - Office
   */
  "accountsList.getListSteam": {
    parameters: {
      query?: {
        /** @description List of games. */
        "game[]"?: string[];
        /** @description List of minimum hours played by game. */
        hours_played?: number[];
        /** @description List of maximum hours played by game. */
        hours_played_max?: number[];
        /** @description List of VAC bans by game. */
        vac?: number;
        /** @description Has community ban. Can be [**yes**, **no**, **nomatter**]. */
        rt?: string;
        /** @description Has lifetime trade ban. Can be [**yes**, **no**, **nomatter**]. */
        trade_ban?: string;
        /** @description Has temporary trade limit. Can be [**yes**, **no**, **nomatter**]. */
        trade_limit?: string;
        /** @description Has Prime in CS2. Can be [**yes**, **no**, **nomatter**]. */
        prime?: string;
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description Has 5 $ limit. Can be [**yes**, **no**, **nomatter**]. */
        limit?: string;
        /** @description Has .mafile (Steam Guard Authenticator). Can be [**yes**, **no**, **nomatter**]. */
        mafile?: string;
        /** @description How old is the account. */
        reg?: number;
        /** @description In what notation is time measured. Can be [**day**, **month**, **year**]. */
        reg_period?: string;
        /** @description Minimum level. */
        lmin?: number;
        /** @description Maximum level. */
        lmax?: number;
        /** @description Minimum rank in CS2 Matchmaking. */
        rmin?: number;
        /** @description Maximum rank in CS2 Matchmaking. */
        rmax?: number;
        /** @description Minimum rank in CS2 Wingman. */
        wingman_rmin?: number;
        /** @description Maximum rank in CS2 Wingman. */
        wingman_rmax?: number;
        /** @description Has no VAC ban. Can be [**yes**, **no**, **nomatter**]. */
        no_vac?: string;
        /** @description Has CS2 Matchmaking ban. */
        mm_ban?: boolean;
        /** @description Minimum balance. */
        balance_min?: number;
        /** @description Maximum balance. */
        balance_max?: number;
        /** @description Game ID to check inventory price */
        inv_game?: number;
        /** @description Minimum inventory price for game. */
        inv_min?: number;
        /** @description Maximum inventory price for game. */
        inv_max?: number;
        /** @description Minimum number of friends. */
        friend_min?: number;
        /** @description Maximum number of friends. */
        friend_max?: number;
        /** @description Minimum number of games. */
        gmin?: number;
        /** @description Maximum number of games. */
        gmax?: number;
        /** @description Minimum number of wins. */
        win_count_min?: number;
        /** @description Maximum number of wins */
        win_count_max?: number;
        /** @description List of medal names. */
        "medal[]"?: string[];
        /** @description List of medal IDs. */
        "medal_id[]"?: number[];
        /** @description Minimum number of medals. */
        medal_min?: number;
        /** @description Maximum number of medals. */
        medal_max?: number;
        /** @description List of gifts. */
        "gift[]"?: string[];
        /** @description Minimum number of gifts. */
        gift_min?: number;
        /** @description Maximum number of gifts. */
        gift_max?: number;
        /** @description Minimum number of recently played hours. */
        recently_hours_min?: number;
        /** @description Maximum number of recently played hours. */
        recently_hours_max?: number;
        /** @description List of allowed countries. */
        "country[]"?: string[];
        /** @description List of disallowed countries. */
        "not_country[]"?: string[];
        /** @description CS2 rank (>=). */
        csgo_profile_rank?: number;
        /** @description Minimum CS2 rank. */
        csgo_profile_rank_min?: number;
        /** @description Maximum CS2 rank. */
        csgo_profile_rank_max?: number;
        /** @description Minimum number of Dota 2 MMR. */
        solommr_min?: number;
        /** @description Maximum number of Dota 2 MMR. */
        solommr_max?: number;
        /** @description Minimum number of Dota 2 games. */
        d2_game_count_min?: number;
        /** @description Maximum number of Dota 2 games. */
        d2_game_count_max?: number;
        /** @description Minimum number of Dota 2 wins. */
        d2_win_count_min?: number;
        /** @description Maximum number of Dota 2 wins. */
        d2_win_count_max?: number;
        /** @description Minimum number of Dota 2 behavior. */
        d2_behavior_min?: number;
        /** @description Maximum number of Dota 2 behavior. */
        d2_behavior_max?: number;
        /** @description Minimum FACEIT level. */
        faceit_lvl_min?: number;
        /** @description Maximum FACEIT level. */
        faceit_lvl_max?: number;
        /** @description Minimum number of Steam points. */
        points_min?: number;
        /** @description Maximum number of Steam points. */
        points_max?: number;
        /** @description Minimum number of relevant games. */
        relevant_gmin?: number;
        /** @description Maximum number of relevant games. */
        relevant_gmax?: number;
        /** @description How old is last transaction. */
        last_trans_date?: number;
        /** @description In what notation is time measured. Can be [**day**, **month**, **year**]. */
        last_trans_date_period?: string;
        /** @description How new is last transaction. */
        last_trans_date_later?: number;
        /** @description In what notation is time measured. Can be [**day**, **month**, **year**]. */
        last_trans_date_period_later?: string;
        /** @description Has no transactions. */
        no_trans?: boolean;
        /** @description Has transactions. */
        trans?: boolean;
        /** @description Minimum Premier ELO in CS2. */
        elo_min?: number;
        /** @description Maximum Premier ELO in CS2. */
        elo_max?: number;
        /** @description Map for rank in CS2. */
        cs2_map_rank?: number;
        /** @description Minimum rank in CS2 on a certain map. */
        cs2_map_rmin?: number;
        /** @description Maximum rank in CS2 on a certain map. */
        cs2_map_rmax?: number;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of account (Inclusive) */
        pmin?: number;
        /** @description Maximum price of account (Inclusive) */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no_market**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Fortnite
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListFortnite": {
    parameters: {
      query?: {
        /** @description Minimum number of skins. */
        smin?: number;
        /** @description Maximum number of skins. */
        smax?: number;
        /** @description Minimum number of V-Bucks. */
        vbmin?: number;
        /** @description Maximum number of V-Bucks. */
        vbmax?: number;
        /** @description Skins. */
        skin?: string[];
        /** @description Pickaxes. */
        pickaxe?: string[];
        /** @description Dances. */
        dance?: string[];
        /** @description Gliders. */
        glider?: string[];
        /** @description Can change email. Can be [**yes**, **no**, **nomatter**]. */
        change_email?: string;
        /** @description Platform. Can be [**Epic**, **EpicAndroid**, **EpicPC**, **IOSAppStore**, **Live**, **Nintendo**, **PSN**, **Samsung**]. */
        platform?: string[];
        /** @description Has Battle Pass. Can be [**yes**, **no**, **nomatter**]. */
        bp?: string;
        /** @description Minimum level. */
        lmin?: number;
        /** @description Maximum level. */
        lmax?: number;
        /** @description Minimum level of Battle Pass. */
        bp_lmin?: number;
        /** @description Maximum level of Battle Pass. */
        bp_lmax?: number;
        /** @description Has Rocket League purchases. */
        rl_purchases?: boolean;
        /** @description How old is last transaction. */
        last_trans_date?: boolean;
        /** @description In what notation is time measured. */
        last_trans_date_period?: string;
        /** @description Has no transactions. */
        no_trans?: boolean;
        /** @description Can be linked to Xbox. Can be [**yes**, **no**, **nomatter**]. */
        xbox_linkable?: string;
        /** @description Can be linked to PSN. Can be [**yes**, **no**, **nomatter**]. */
        psn_linkable?: string;
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description Access to market temp mail. Can be [**yes**, **no**, **nomatter**]. */
        temp_email?: string;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Vkontakte
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListVkontakte": {
    parameters: {
      query?: {
        /** @description List of allowed countries. */
        "vk_country[]"?: string[];
        /** @description List of allowed cities. */
        "vk_city[]"?: string[];
        /** @description Minimum number of friends. */
        vk_friend_min?: number;
        /** @description Maximum number of friends. */
        vk_friend_max?: number;
        /** @description Minimum number of followers. */
        vk_follower_min?: number;
        /** @description Maximum number of followers. */
        vk_follower_max?: number;
        /** @description Minimum number of votes. */
        vk_vote_min?: number;
        /** @description Maximum number of votes. */
        vk_vote_max?: number;
        /** @description Sex of account. Can be [**man**, **woman**]. */
        sex?: string;
        /** @description Has linked mobile. Can be [**yes**, **no**, **nomatter**]. */
        tel?: string;
        /** @description Has linked email. Can be [**yes**, **no**, **nomatter**]. */
        email?: string;
        /** @description Has enabled 2FA. Can be [**yes**, **no**, **nomatter**]. */
        tfa?: string;
        /** @description Relationship. */
        "relation[]"?: number[];
        /** @description Login into account by token only. Can be [**yes**, **no**, **nomatter**]. */
        token_auth_only?: string;
        /** @description Minimum number of group followers. */
        group_follower_min?: number;
        /** @description Maximum number of group followers. */
        group_follower_max?: number;
        /** @description Minimum number of groups. */
        groups_min?: number;
        /** @description Maximum number of groups. */
        groups_max?: number;
        /** @description Admin level. Can be [**1**, **2**, **3**, **4**]. */
        admin_level?: number;
        /** @description Minimum age. */
        min_age?: number;
        /** @description Maximum age. */
        max_age?: number;
        /** @description Minimum number of digits in ID. */
        dig_min?: number;
        /** @description Maximum number of digits in ID. */
        dig_max?: number;
        /** @description Minimum number of conversations. */
        conversations_min?: number;
        /** @description Maximum number of conversations. */
        conversations_max?: number;
        /** @description How old is the account. */
        reg?: number;
        /** @description In what notation is time measured. Can be [**day**, **month**, **year**]. */
        reg_period?: string;
        /** @description List of allowed countries of phone number. */
        "mcountry[]"?: string[];
        /** @description List of excluded countries of phone number. */
        "not_mcountry[]"?: string[];
        /** @description Opened account profile. */
        opened_profile?: boolean;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Genshin Impact
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListGenshinImpact": {
    parameters: {
      query?: {
        /** @description Has linked email. Can be [**yes**, **no**, **nomatter**]. */
        email?: string;
        /** @description Has linked mobile. Can be [**yes**, **no**, **nomatter**]. */
        tel?: string;
        /** @description List of characters. */
        "character[]"?: string[];
        /** @description Region. Can be [**os_euro**, **os_asia**, **os_cht**]. */
        region?: string;
        /** @description Has linked external accounts. Can be [**yes**, **no**, **nomatter**]. */
        ea?: string;
        /** @description Minimum number of legendary characters. */
        legendary_min?: number;
        /** @description Maximum number of legendary characters. */
        legendary_max?: number;
        /** @description Minimum number of constellations on legendary characters. */
        constellation_min?: number;
        /** @description Maximum number of constellations on legendary characters. */
        constellation_max?: number;
        /** @description Minimum number of legendary weapon characters. */
        legendary_weapon_min?: number;
        /** @description Maximum number of legendary weapon characters. */
        legendary_weapon_max?: number;
        /** @description Minimum number of characters. */
        char_min?: number;
        /** @description Maximum number of characters. */
        char_max?: number;
        /** @description Minimum level. */
        level_min?: number;
        /** @description Maximum level. */
        level_max?: number;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Valorant
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListValorant": {
    parameters: {
      query?: {
        /** @description List of weapon skins. */
        "weaponSkin[]"?: string[];
        /** @description List of buddies. */
        "buddy[]"?: string[];
        /** @description List of agents. */
        "agent[]"?: string[];
        /** @description List of allowed countries. */
        "country[]"?: string[];
        /** @description List of disallowed countries. */
        "not_country[]"?: string[];
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description Minimum level. */
        level_min?: number;
        /** @description Maximum level. */
        level_max?: number;
        /** @description Minimum inventory value. */
        inv_min?: number;
        /** @description Maximum inventory value. */
        inv_max?: number;
        /** @description Minimum number of Valorant points. */
        vp_min?: number;
        /** @description Maximum number of Valorant points. */
        vp_max?: number;
        /** @description Minimum number of skins. */
        smin?: number;
        /** @description Maximum number of skins. */
        smax?: number;
        /** @description Minimum rank (from 3 to 27). */
        rmin?: number;
        /** @description Maximum rank. */
        rmax?: number;
        /** @description Last Minimum rank (from 3 to 27). */
        last_rmin?: number;
        /** @description Last Maximum rank. */
        last_rmax?: number;
        /** @description Rank type. Can be [**ranked**, **ranked_ready**, **unrated**]. */
        rank_type?: string;
        /** @description Minimum amount of agents. */
        amin?: number;
        /** @description Maximum amount of agents. */
        amax?: number;
        /** @description Region. Can be [**eu**, **ap**, **kr**, **na**, **br**, **la**]. */
        "region[]"?: string[];
        /** @description Exclude region. Can be [**eu**, **ap**, **kr**, **na**, **br**, **la**]. */
        "not_region[]"?: string[];
        /** @description Has linked email. Can be [**yes**, **no**, **nomatter**]. */
        email?: string;
        /** @description Has linked mobile. Can be [**yes**, **no**, **nomatter**]. */
        tel?: string;
        /** @description Can change email. Can be [**yes**, **no**, **nomatter**]. */
        changeable_email?: string;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * League of Legends
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListLoL": {
    parameters: {
      query?: {
        /** @description Minimum level. */
        lvl_min?: number;
        /** @description Maximum level. */
        lvl_max?: number;
        /** @description Minimum winrate. */
        winrate_min?: number;
        /** @description Maximum winrate. */
        winrate_max?: number;
        /** @description Minimum wallet blue balance. */
        wallet_blue_min?: number;
        /** @description Maximum wallet blue balance. */
        wallet_blue_max?: number;
        /** @description Minimum wallet orange balance. */
        wallet_orange_min?: number;
        /** @description Maximum wallet orange balance. */
        wallet_orange_max?: number;
        /** @description Minimum wallet mythic balance. */
        wallet_mythic_min?: number;
        /** @description Maximum wallet mythic balance. */
        wallet_mythic_max?: number;
        /** @description Minimum wallet riot balance. */
        wallet_riot_min?: number;
        /** @description Maximum wallet riot balance. */
        wallet_riot_max?: number;
        /** @description List of skins. */
        "skin[]"?: string[];
        /** @description List of champions. */
        "champion[]"?: string[];
        /** @description List of allowed countries. */
        "country[]"?: string[];
        /** @description Region. Can be [**la1**, **la2**, **br1**, **euw1**, **tr1**, **na1**, **eun1**, **ru**, **oc1**, **jp1**, **ph2**, **vn2**, **th2**, **sg2**]. */
        "region[]"?: string[];
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description Has linked mobile. Can be [**yes**, **no**, **nomatter**]. */
        tel?: string;
        /** @description Has confirmed email. Can be [**yes**, **no**, **nomatter**]. */
        mail?: string;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Telegram
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListTelegram": {
    parameters: {
      query?: {
        /** @description Has a spam ban. Can be [**yes**, **no**, **nomatter**]. */
        spam?: string;
        /** @description Has a cloud password. Can be [**yes**, **no**, **nomatter**]. */
        password?: string;
        /** @description Has a premium subscription. Can be [**yes**, **no**, **nomatter**]. */
        premium?: string;
        /** @description List of allowed countries. */
        "country[]"?: string[];
        /** @description List of disallowed countries. */
        "not_country[]"?: string[];
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description Minimum number of channels. */
        min_channels?: number;
        /** @description Maximum number of channels. */
        max_channels?: number;
        /** @description Minimum number of chats. */
        min_chats?: number;
        /** @description Maximum number of chats. */
        max_chats?: number;
        /** @description Minimum number of conversations. */
        min_conversations?: number;
        /** @description Maximum number of conversations. */
        max_conversations?: number;
        /** @description Minimum number of channels, where account is administrator/owner. */
        min_admin?: number;
        /** @description Maximum number of channels, where account is administrator/owner. */
        max_admin?: number;
        /** @description Minimum number of subscribers in channel, where account is administrator/owner. */
        min_admin_sub?: number;
        /** @description Maximum number of subscribers in channel, where account is administrator/owner. */
        max_admin_sub?: number;
        /** @description Minimum number of digits in ID. */
        dig_min?: number;
        /** @description Maximum number of digits in ID. */
        dig_max?: number;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Supercell
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListSupercell": {
    parameters: {
      query?: {
        /** @description Account service. Can be [**laser**, **scroll**, **magic**]. */
        system?: string;
        /** @description Minimum level. */
        lmin?: number;
        /** @description Maximum level. */
        lmax?: number;
        /** @description Minimum number of cups. */
        cup_min?: number;
        /** @description Maximum number of cups. */
        cup_max?: number;
        /** @description Minimum number of brawlers. */
        brawlers_min?: number;
        /** @description Maximum number of brawlers. */
        brawlers_max?: number;
        /** @description List of brawlers. */
        brawler?: number;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Origin
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListOrigin": {
    parameters: {
      query?: {
        /** @description List of games. */
        "game[]"?: string[];
        /** @description List of allowed countries. */
        "country[]"?: string[];
        /** @description List of disallowed countries. */
        "not_country[]"?: string[];
        /** @description List of Apex Legends rank groups. */
        "al_rank_group[]"?: number[];
        /** @description Minimum level in Apex Legends. */
        al_level_min?: number;
        /** @description Maximum level in Apex Legends. */
        al_level_max?: number;
        /** @description Xbox connected to account. Can be [**yes**, **no**, **nomatter**]. */
        xbox_connected?: string;
        /** @description Steam connected to account. Can be [**yes**, **no**, **nomatter**]. */
        steam_connected?: string;
        /** @description Name of subscription. Can be [**EA Play**, **EA Play Pro**]. */
        subscription?: string;
        /** @description Length of subscription. */
        subscription_length?: number;
        /** @description In what notation is time measured. Can be [**day**, **month**, **year**]. */
        subscription_period?: string;
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * World of Tanks
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListWoT": {
    parameters: {
      query?: {
        /** @description Has linked mobile. Can be [**yes**, **no**, **nomatter**]. */
        tel?: string;
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description Minimum number of battles. */
        battles_min?: number;
        /** @description Maximum number of battles. */
        battles_max?: number;
        /** @description Minimum number of gold. */
        gold_min?: number;
        /** @description Maximum number of gold. */
        gold_max?: number;
        /** @description Minimum number of silver. */
        silver_min?: number;
        /** @description Maximum number of silver. */
        silver_max?: number;
        /** @description Minimum number of top tanks. */
        top_min?: number;
        /** @description Maximum number of top tanks. */
        top_max?: number;
        /** @description Minimum number of premium tanks. */
        prem_min?: number;
        /** @description Maximum number of premium tanks. */
        prem_max?: number;
        /** @description Minimum number of top premium tanks. */
        top_prem_min?: number;
        /** @description Maximum number of top premium tanks. */
        top_prem_max?: number;
        /** @description Minimum number of wins. */
        win_pmin?: number;
        /** @description Maximum number of wins. */
        win_pmax?: number;
        /** @description List of tanks. */
        "tank[]"?: string[];
        /** @description Region. Can be [**ru**, **eu**, **na**, **asia**]. */
        "region[]"?: string[];
        /** @description Exclude region. Can be [**ru**, **eu**, **na**, **asia**]. */
        "not_region[]"?: string[];
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * WoT Blitz
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListWoTBlitz": {
    parameters: {
      query?: {
        /** @description Has linked mobile. Can be [**yes**, **no**, **nomatter**]. */
        tel?: string;
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description Minimum number of battles. */
        battles_min?: number;
        /** @description Maximum number of battles. */
        battles_max?: number;
        /** @description Minimum number of gold. */
        gold_min?: number;
        /** @description Maximum number of gold. */
        gold_max?: number;
        /** @description Minimum number of silver. */
        silver_min?: number;
        /** @description Maximum number of silver. */
        silver_max?: number;
        /** @description Minimum number of top tanks. */
        top_min?: number;
        /** @description Maximum number of top tanks. */
        top_max?: number;
        /** @description Minimum number of premium tanks. */
        prem_min?: number;
        /** @description Maximum number of premium tanks. */
        prem_max?: number;
        /** @description Minimum number of top premium tanks. */
        top_prem_min?: number;
        /** @description Maximum number of top premium tanks. */
        top_prem_max?: number;
        /** @description Minimum number of wins. */
        win_pmin?: number;
        /** @description Maximum number of wins. */
        win_pmax?: number;
        /** @description List of tanks. */
        "tank[]"?: string[];
        /** @description Region. Can be [**ru**, **eu**, **na**, **asia**]. */
        "region[]"?: string[];
        /** @description Exclude region. Can be [**ru**, **eu**, **na**, **asia**]. */
        "not_region[]"?: string[];
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Epic Games
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListEpicGames": {
    parameters: {
      query?: {
        /** @description List of games. */
        "game[]"?: string[];
        /** @description You can change email. Can be [**yes**, **no**, **nomatter**]. */
        change_email?: string;
        /** @description Has Rocket League purchases. */
        rl_purchases?: boolean;
        /** @description Has login data for Social Club account. */
        sc?: boolean;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Escape from Tarkov
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListEscapeFromTarkov": {
    parameters: {
      query?: {
        /** @description Region. Can be [**cis**, **eu**, **as**, **us**]. */
        region?: string;
        /** @description List of versions. Can be [**standard**, **left_behind**, **prepare_for_escape**, **edge_of_darkness**]. */
        "version[]"?: string[];
        /** @description List of secured containers. Can be [**544a11ac4bdc2d470e8b456a**, **5857a8b324597729ab0a0e7d**, **59db794186f77448bc595262**, **5857a8bc2459772bad15db29**, **5c093ca986f7740a1867ab12**]. */
        "sc[]"?: string[];
        /** @description Minimum experience. */
        exp_min?: number;
        /** @description Maximum experience. */
        exp_max?: number;
        /** @description Minimum level. */
        level_min?: number;
        /** @description Maximum level. */
        level_max?: number;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Social Club
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListSocialClub": {
    parameters: {
      query?: {
        /** @description Has Red Dead Redemption 2. */
        rdr2?: boolean;
        /** @description Has GTA 5. */
        gtav?: boolean;
        /** @description Number of days the account has been offline */
        daybreak?: boolean;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Uplay
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListUplay": {
    parameters: {
      query?: {
        /** @description List of games. */
        "game[]"?: string[];
        /** @description List of allowed countries. */
        "country[]"?: string[];
        /** @description List of disallowed countries. */
        "not_country[]"?: string[];
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description Minimum level in Tom Clancy's Rainbow Six Siege. */
        r6_level_min?: number;
        /** @description Maximum level in Tom Clancy's Rainbow Six Siege. */
        r6_level_max?: number;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * War Thunder
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListWarThunder": {
    parameters: {
      query?: {
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description Minimum number of gold. */
        gold_min?: number;
        /** @description Maximum number of gold. */
        gold_max?: number;
        /** @description Minimum number of silver. */
        silver_min?: number;
        /** @description Maximum number of silver. */
        silver_max?: number;
        /** @description Minimum rank. */
        rank_min?: number;
        /** @description Maximum rank. */
        rank_max?: number;
        /** @description Minimum number of elite units. */
        eliteUnits_min?: number;
        /** @description Maximum number of elite units. */
        eliteUnits_max?: number;
        /** @description Minimum number of played games. */
        played_min?: number;
        /** @description Maximum number of played games. */
        played_max?: number;
        /** @description Minimum number of wins. */
        wins_min?: number;
        /** @description Maximum number of wins. */
        wins_max?: number;
        /** @description Has verified mobile. Can be [**yes**, **no**, **nomatter**]. */
        phone_verified?: string;
        /** @description Has verified email. Can be [**yes**, **no**, **nomatter**]. */
        email_verified?: string;
        /** @description Has premium. Can be [**yes**, **no**, **nomatter**]. */
        premium?: string;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Discord
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListDiscord": {
    parameters: {
      query?: {
        /** @description Has linked mobile. Can be [**yes**, **no**, **nomatter**]. */
        tel?: string;
        /** @description Has Nitro. Can be [**yes**, **no**, **nomatter**]. */
        nitro?: string;
        /** @description Has billing. Can be [**yes**, **no**, **nomatter**]. */
        billing?: string;
        /** @description Has gifts. Can be [**yes**, **no**, **nomatter**]. */
        gifts?: string;
        /** @description Is quarantined. Can be [**yes**, **no**, **nomatter**]. */
        quarantined?: string;
        /** @description List of account conditions. Can be [**empty**, **nospam**, **spam**, **cleaned**]. */
        "condition[]"?: string[];
        /** @description Minimum number of chats. */
        chat_min?: number;
        /** @description Maximum number of chats. */
        chat_max?: number;
        /** @description How old is the account. */
        reg?: number;
        /** @description In what notation is time measured. Can be [**day**, **month**, **year**]. */
        reg_period?: string;
        /** @description List of regions. */
        "locale[]"?: string[];
        /** @description List of regions that won't be included. */
        "not_locale[]"?: string[];
        /** @description List of badges. */
        "badge[]"?: string[];
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * TikTok
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListTikTok": {
    parameters: {
      query?: {
        /** @description Has linked mobile. Can be [**yes**, **no**, **nomatter**]. */
        tel?: string;
        /** @description Minimum number of followers. */
        fmin?: number;
        /** @description Maximum number of followers. */
        fmax?: number;
        /** @description Minimum number of posts. */
        post_min?: number;
        /** @description Maximum number of posts. */
        post_max?: number;
        /** @description Minimum number of likes. */
        like_min?: number;
        /** @description Maximum number of likes. */
        like_max?: number;
        /** @description Minimum number of coins. */
        coins_min?: number;
        /** @description Maximum number of coins. */
        coins_max?: number;
        /** @description List of allowed countries. */
        "tt_country[]"?: string[];
        /** @description List of disallowed countries. */
        "tt_not_country[]"?: string[];
        /** @description Login by cookies. Can be [**yes**, **no**, **nomatter**]. */
        cookie_login?: string;
        /** @description Has a verified badge. Can be [**yes**, **no**, **nomatter**]. */
        verified?: string;
        /** @description Can start a live stream. Can be [**yes**, **no**, **nomatter**]. */
        hasLivePermission?: string;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Instagram
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListInstagram": {
    parameters: {
      query?: {
        /** @description Has linked mobile. Can be [**yes**, **no**, **nomatter**]. */
        tel?: string;
        /** @description List of allowed countries. */
        "country[]"?: string[];
        /** @description List of disallowed countries. */
        "not_country[]"?: string[];
        /** @description Login by cookies. Can be [**yes**, **no**, **nomatter**]. */
        cookies?: string;
        /** @description Login without cookies. Can be [**yes**, **no**, **nomatter**]. */
        login_without_cookies?: string;
        /** @description Minimum number of followers. */
        fmin?: number;
        /** @description Maximum number of followers. */
        fmax?: number;
        /** @description Minimum number of posts. */
        post_min?: number;
        /** @description Maximum number of posts. */
        post_max?: number;
        /** @description How old is the account. */
        reg?: number;
        /** @description In what notation is time measured. Can be [**day**, **month**, **year**]. */
        reg_period?: string;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * BattleNet
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListBattleNet": {
    parameters: {
      query?: {
        /** @description List of games. */
        "game[]"?: string[];
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description List of allowed countries. */
        "country[]"?: string[];
        /** @description List of disallowed countries. */
        "not_country[]"?: string[];
        /** @description Can edit BattleTag. Can be [**yes**, **no**, **nomatter**]. */
        edit_btag?: string;
        /** @description Can edit full name. Can be [**yes**, **no**, **nomatter**]. */
        changeable_fn?: string;
        /** @description Read name. Can be [**yes**, **no**, **nomatter**]. */
        real_id?: string;
        /** @description Has linked mobile. Can be [**yes**, **no**, **nomatter**]. */
        tel?: string;
        /** @description Has enabled parent control. Can be [**yes**, **no**, **nomatter**]. */
        parent_control?: string;
        /** @description Login by cookies. Can be [**yes**, **no**, **nomatter**]. */
        cookies?: string;
        /** @description Minimum level in Overwatch. */
        lmin?: number;
        /** @description Maximum level in Overwatch. */
        lmax?: number;
        /** @description Minimum balance. */
        balance_min?: number;
        /** @description Maximum balance. */
        balance_max?: number;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * VPN
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListVpn": {
    parameters: {
      query?: {
        /** @description List of allowed VPN services. Can be [**windscribeVPN**, **tunnelbearVPN**, **vanishVPN**, **zenmateVPN**, **zenmateVPNUltimate**, **ultraVPN**, **xVPN**, **protonVPN**, **mullvadVPN**, **PIAVPN**, **AdguardVPN**, **pureVPN**]. */
        "service_id[]"?: string[];
        /** @description Length of subscription. */
        subscription_length?: number;
        /** @description In what notation is time measured. Can be [**day**, **month**, **year**]. */
        subscription_period?: string;
        /** @description Is renewable enabled. Can be [**yes**, **no**, **nomatter**]. */
        renewable?: string;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Cinema
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListCinema": {
    parameters: {
      query?: {
        /** @description List of allowed cinema services. Can be [**moretv**, **ivi**, **start**,  **megogo**, **kinopoisk**]. */
        "service_id[]"?: string[];
        /** @description Length of subscription. */
        subscription_length?: number;
        /** @description In what notation is time measured. Can be [**day**, **month**, **year**]. */
        subscription_period?: string;
        /** @description Is auto renewal enabled. Can be [**yes**, **no**, **nomatter**]. */
        autorenewal?: string;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Spotify
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListSpotify": {
    parameters: {
      query?: {
        /** @description List of allowed countries. */
        "country[]"?: string[];
        /** @description List of disallowed countries. */
        "not_country[]"?: string[];
        /** @description Has family subscription. Can be [**yes**, **no**, **nomatter**]. */
        family?: string;
        /** @description Has family manager permissions. Can be [**yes**, **no**, **nomatter**]. */
        family_manager?: string;
        /** @description Minimum count of members in family. */
        family_member_count_min?: number;
        /** @description Maximum count of members in family. */
        family_member_count_max?: number;
        /** @description Length of subscription. */
        subscription_length?: number;
        /** @description In what notation is time measured. Can be [**day**, **month**, **year**]. */
        subscription_period?: string;
        /** @description Is auto renewal enabled. Can be [**yes**, **no**, **nomatter**]. */
        recurring?: string;
        /** @description Trial subscription. Can be [**yes**, **no**, **nomatter**]. */
        trial?: string;
        /** @description List of allowed plans. Can be [**Premium Student**, **Premium Fallback**, **Premium Duo**, **Premium Family**, **Premium Individual**]. */
        "plan_name[]"?: string[];
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Warface
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListWarface": {
    parameters: {
      query?: {
        /** @description Minimum rank. */
        rank_min?: number;
        /** @description Maximum rank. */
        rank_max?: number;
        /** @description Minimum bonus rank. */
        bonus_rank_min?: number;
        /** @description Maximum bonus rank. */
        bonus_rank_max?: number;
        /** @description Has linked mobile. Can be [**yes**, **no**, **nomatter**]. */
        tel?: string;
        /** @description Number of days the account has been offline. */
        daybreak?: number;
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Youtube
   * @description Displays a list of accounts in a specific category according to your parameters.
   */
  "accountsList.getListYoutube": {
    parameters: {
      query?: {
        /** @description Is brand account. Can be [**yes**, **no**, **nomatter**]. */
        brand?: string;
        /** @description Has monetization. Can be [**yes**, **no**, **nomatter**]. */
        monetization?: string;
        /** @description Has status artist. Can be [**yes**, **no**, **nomatter**]. */
        artist?: string;
        /** @description Has verified. Can be [**yes**, **no**, **nomatter**]. */
        verified?: string;
        /** @description Has password. Can be [**yes**, **no**, **nomatter**]. */
        password?: string;
        /** @description Minimum subscribes. */
        subscribes_min?: number;
        /** @description Maximum subscribes. */
        subscribes_max?: number;
        /** @description Minimum views count. */
        viewcount_min?: number;
        /** @description Maximum views count. */
        viewcount_max?: number;
        /** @description Minimum video count. */
        videocount_min?: number;
        /** @description Maximum video count. */
        videocount_max?: number;
        /** @description How old is the account. */
        reg?: number;
        /** @description In what notation is time measured. Can be [**day**, **month**, **year**]. */
        reg_period?: string;
        /** @description List of regions. */
        "locale[]"?: string[];
        /** @description List of regions that won't be included */
        "not_locale[]"?: string[];
        /** @description The number of the page to display results from. */
        page?: number;
        /** @description Minimal price of accounts. */
        pmin?: number;
        /** @description Maximum price of accounts. */
        pmax?: number;
        /** @description Email type. Can be [**market**, **autoreg**, **native**, **no**]. */
        "email_type[]"?: string[];
        /** @description Domain of native/autoreg email. */
        item_domain?: string;
        /** @description Auction. Can be [**yes**, **no**, **nomatter**]. */
        auction?: string;
        /** @description List of account origins. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "origin[]"?: string[];
        /** @description List of account origins that won't be included. Can be [**brute**, **fishing**, **stealer**, **personal**, **resale**, **autoreg**]. */
        "not_origin[]"?: string[];
        /** @description Sold before. */
        sb?: boolean;
        /** @description Not sold before. */
        nsb?: boolean;
        /** @description Sold by me before. */
        sb_by_me?: boolean;
        /** @description Not sold by me before. */
        nsb_by_me?: boolean;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order by. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_down_upload**, **pdate_to_up**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Get User Accounts List
   * @description Displays a list of owned accounts.
   *
   * Category id-names list:
   * + 1 - steam - **Steam**
   * + 2 - vkontakte - **VK**
   * + 3 - origin - **Origin**
   * + 4 - warface - **Warface**
   * + 5 - uplay - **Uplay**
   * + 7 - socialclub - **Social Club**
   * + 9 - fortnite - **Fortnite**
   * + 10 - instagram - **Instagram**
   * + 11 - battlenet - **Battle.net**
   * + 12 - epicgames - **Epic Games**
   * + 13 - valorant - **Valorant**
   * + 14 - world-of-tanks - **World Of Tanks**
   * + 16 - wot-blitz - **World Of Tanks Blitz**
   * + 15 - supercell - **Supercell**
   * + 17 - genshin-impact - **Genshin Impact**
   * + 18 - escape-from-tarkov - **Escape From Tarkov**
   * + 19 - vpn - **VPN**
   * + 20 - tiktok - **TikTok**
   * + 22 - discord - **Discord**
   * + 23 - cinema - **Online Cinema**
   * + 24 - telegram - **Telegram**
   * + 25 - youtube - **YouTube**
   * + 26 - spotify - **Spotify**
   * + 27 - war-thunder - **War Thunder**
   */
  "accountsList.getOwned": {
    parameters: {
      query?: {
        /** @description Accounts category */
        category_id?: number;
        /** @description Minimal price of account (Inclusive) */
        pmin?: number;
        /** @description Maximum price of account (Inclusive) */
        pmax?: number;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order type. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_up**, **pdate_to_down_upload**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
        /** @description Account status. Can be [**active**, **paid**, **deleted** or **awaiting**]. */
        show?: string;
        /** @description The number of the page to display results from. */
        page?: number;
      };
      path: {
        /** @description User id */
        userId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Get All Purchased Accounts
   * @description Displays a list of purchased accounts.
   *
   * Category id-names list:
   * + 1 - steam - **Steam**
   * + 2 - vkontakte - **VK**
   * + 3 - origin - **Origin**
   * + 4 - warface - **Warface**
   * + 5 - uplay - **Uplay**
   * + 7 - socialclub - **Social Club**
   * + 9 - fortnite - **Fortnite**
   * + 10 - instagram - **Instagram**
   * + 11 - battlenet - **Battle.net**
   * + 12 - epicgames - **Epic Games**
   * + 13 - valorant - **Valorant**
   * + 14 - world-of-tanks - **World Of Tanks**
   * + 16 - wot-blitz - **World Of Tanks Blitz**
   * + 15 - supercell - **Supercell**
   * + 17 - genshin-impact - **Genshin Impact**
   * + 18 - escape-from-tarkov - **Escape From Tarkov**
   * + 19 - vpn - **VPN**
   * + 20 - tiktok - **TikTok**
   * + 22 - discord - **Discord**
   * + 23 - cinema - **Online Cinema**
   * + 24 - telegram - **Telegram**
   * + 25 - youtube - **YouTube**
   * + 26 - spotify - **Spotify**
   * + 27 - war-thunder - **War Thunder**
   */
  "accountsList.getPurchased": {
    parameters: {
      query?: {
        /** @description Accounts category */
        category_id?: number;
        /** @description Minimal price of account (Inclusive) */
        pmin?: number;
        /** @description Maximum price of account (Inclusive) */
        pmax?: number;
        /** @description The word or words contained in the account title */
        title?: string;
        /** @description Order type. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_up**, **pdate_to_down_upload**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
        /** @description Account status. Can be [**active**, **paid**, **deleted** or **awaiting**]. */
        show?: string;
        /** @description The number of the page to display results from */
        page?: number;
      };
      path: {
        /** @description User id */
        userId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
    };
  };
  /**
   * Get All Favourites Accounts
   * @description Displays a list of favourites accounts.
   */
  "accountsList.getFavorite": {
    parameters: {
      query?: {
        /** @description The number of the page to display results from */
        page?: number;
        /** @description Order type. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_up**, **pdate_to_down_upload**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
        /** @description Account status. Can be [**active**, **paid**, **deleted** or **awaiting**]. */
        show?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Get All Viewed Accounts
   * @description Displays a list of viewed accounts.
   */
  "accountsList.getViewed": {
    parameters: {
      query?: {
        /** @description The number of the page to display results from */
        page?: number;
        /** @description Order type. Can be [**price_to_up**, **price_to_down**, **pdate_to_down**, **pdate_to_up**, **pdate_to_down_upload**, **pdate_to_up_upload**, **exp_auctions**]. */
        order_by?: string;
        /** @description Account status. Can be [**active**, **paid**, **deleted** or **awaiting**]. */
        show?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountListModel"];
        };
      };
    };
  };
  /**
   * Get Info Account
   * @description Displays account information.
   */
  "accountsList.getInformation": {
    parameters: {
      path: {
        /** @description Item id */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ItemsModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Soft Delete Account
   * @description Deletes your account from public search. Deletion type is soft. You can restore account after deletion if you want.
   */
  "accountsManaging.delete": {
    parameters: {
      query: {
        /** @description Delete reason. */
        reason: string;
      };
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MoneyTransferModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Steam Acc Html
   * @description Returns Steam account html code.
   */
  "accountsList.getSteamHtml": {
    parameters: {
      query?: {
        /** @description Type of page - **profiles** or **games** */
        type?: string;
      };
      path: {
        /** @description Item id */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/html": unknown;
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Search Category
   * @description Displays search parameters for a category.
   */
  "accountsList.getSearchCategory": {
    parameters: {
      path: {
        /** @description Category name. */
        categoryName: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["PageNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Games Category
   * @description Displays a list of games in the category.
   */
  "accountsList.getGamesCategory": {
    parameters: {
      path: {
        /** @description Category name. */
        categoryName: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GamesModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["PageNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Auction
   * @description Display a list of bids in the auction.
   */
  "auction.get": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AuctionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Post Auction Bid
   * @description Create a new auction bid.
   */
  "auction.postBid": {
    parameters: {
      query: {
        /** @description Using currency. Can be [**rub**, **uah**, **kzt**, **byn**, **usd**, **eur**, **gbp**, **cny**, **try**]. */
        currency?: string;
        /** @description Amount bid. */
        amount: number;
      };
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AuctionBidNewModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["AuctionErrorLastBidModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Delete Auction Bid
   * @description Delete your auction bid. You can delete your auction bid within 5 minutes.
   */
  "auction.deleteBid": {
    parameters: {
      query: {
        /** @description Bid id. */
        bid_id: number;
      };
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AuctionBidDeleteModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["AuctionErrorTimeExpiredModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Steam Value
   * @description Gets steam value.
   *
   * Application id list:
   * + **730** - CS2
   * + **578080** - PUBG
   * + **753** - Steam
   * + **570** - Dota 2
   * + **440** - Team Fortress 2
   * + **252490** - Rust
   * + **304930** - Unturned
   * + **304930** - Unturned
   * + **232090** - Killing Floor 2
   * + **322330** - Don't Starve Together
   */
  "accountsManaging.getSteamValue": {
    parameters: {
      query: {
        /** @description Link or id of account. Can be [**https://lzt.market/{item-id}/**, **https://steamcommunity.com/id/{steam-name}**, **https://steamcommunity.com/profiles/{steam-id}**, **{steam-id}**]. */
        link: string;
        /** @description Application id. */
        app_id: number;
        /** @description Using currency for amount. Can be [**cny**, **usd**, **rub**, **eur**, **uah**, **kzt**, **byn**, **gbp**]. */
        currency?: string;
        /** @description Ignore cache. */
        ignore_cache?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SteamValueModel"];
        };
      };
    };
  };
  /**
   * Buy Account
   * @description Check and buy account.
   */
  "accountsPurchasing.checkBuy": {
    parameters: {
      query: {
        /** @description Current price of account in your currency */
        price: number;
        /** @description Put **1** if you want to buy account without account data validation (not safe). Does not work for steam category (category_id=1). */
        buy_without_validation?: number;
      };
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FastBuyModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Set Reserve Account
   * @description Reserves account for you. Reserve time - 300 seconds.
   */
  "accountsPurchasing.setReserve": {
    parameters: {
      query: {
        /** @description Current price of account in your currency */
        price: number;
      };
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReserveBuyModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["SoldItemModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Cancel Reserve Account
   * @description Cancels reserve.
   */
  "accountsPurchasing.cancelReserve": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveChangesModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Check Account
   * @description Checking account for validity. If the account is invalid, the purchase will be canceled automatically (you don't need to make request **POST /:itemId/cancel-reserve**).
   */
  "accountsPurchasing.check": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CheckAccBuyModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Confirm Buy
   * @description Confirm buy.
   */
  "accountsPurchasing.confirmBuy": {
    parameters: {
      query?: {
        /** @description Put **1** if you want to buy account without account data validation (not safe). Does not work for steam category (category_id=1). */
        buy_without_validation?: number;
      };
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfirmBuyModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["SoldItemModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Send Money
   * @description Send money to any user.
   *
   * The web version additionally has a **redirect** parameter (After payment, there will be a redirect to the specified link).
   */
  "paymentsList.sendMoney": {
    parameters: {
      query: {
        /** @description User id of receiver. If **user_id** specified, **username** is not required. */
        user_id?: number;
        /** @description Username of receiver. If **username** specified, **user_id** is not required. */
        username?: string;
        /** @description Amount to send in your currency. */
        amount: number;
        /** @description Using currency for amount. Allowed values: **cny**, **usd**, **rub**, **eur**, **uah**, **kzt**, **byn**, **gbp** */
        currency: string;
        /** @description Secret answer of your account */
        secret_answer: string;
        /** @description Transfer comment */
        comment?: string;
        /** @description Hold transfer or not */
        transfer_hold?: boolean;
        /** @description Hold length value */
        hold_length_value?: number;
        /** @description Hold length option. Allowed values: **hour**, **day**, **week**, **month**, **year** */
        hold_length_option?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MoneyTransferModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["InvalidSAModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["UserNotFoundModel"];
        };
      };
    };
  };
  /**
   * History Payments
   * @description Displays list of your payments.
   */
  "paymentsList.history": {
    parameters: {
      query?: {
        /** @description Type of operation. Allowed operation types: **income**, **cost**, **refilled_balance**, **withdrawal_balance**, **paid_item**, **sold_item**, **money_transfer**, **receiving_money**, **internal_purchase**, **claim_hold** */
        type?: string;
        /** @description Minimal price of operation (Inclusive) */
        pmin?: number;
        /** @description Maximum price of operation (Inclusive) */
        pmax?: number;
        /** @description The number of the page to display results from */
        page?: number;
        /** @description Id of the operation from which the result begins */
        operation_id_lt?: number;
        /** @description Username of user, which receive money from you */
        receiver?: string;
        /** @description Username of user, which sent money to you */
        sender?: string;
        /** @description Start date of operation (RFC 3339 date format) */
        startDate?: string;
        /** @description End date of operation (RFC 3339 date format) */
        endDate?: string;
        /** @description Wallet, which used for money payouts. */
        wallet?: string;
        /** @description Comment for money transfers */
        comment?: string;
        /** @description Display hold operations */
        is_hold?: number;
        /** @description Display payment stats for selected period (outgoing value, incoming value) */
        show_payment_stats?: number;
      };
      path: {
        /** @description User id */
        userId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryPaymentsModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
    };
  };
  /**
   * Fast Sell Account
   * @description Adds and check account on validity. If account is valid, account will be published on the market.
   *
   * Account origin. Where did you get it from.
   * + brute - Account received using Bruteforce
   * + fishing - Account received from fishing page
   * + stealer - Account received from stealer logs
   * + autoreg - Account is automatically registered by a tool
   * + personal - Account is yours. You created it yourself
   * + resale - Account received from another seller
   * + retrive - Account is recovered by email or phone (only for VKontakte category)
   * + dummy - Dummy (empty) account (only for Steam category)
   *
   * Required email login data categories:
   * + 9 - Fortnite
   * + 12 - Epic games
   * + 18 - Escape from Tarkov
   */
  "accountPublishing.fastSell": {
    parameters: {
      query: {
        /** @description Russian title of account. If **title** specified and **title_en** is empty, **title_en** will be automatically translated to English language. */
        title?: string;
        /** @description English title of account. If **title_en** specified and **title** is empty, **title** will be automatically translated to Russian language. */
        title_en?: string;
        /** @description Account price in your currency. */
        price: number;
        /** @description Sales method. Can be [**price**, **auction**]. */
        type_sell: string;
        /** @description Duration auction value. At the end of the auction time, the item will be closed if there were no bids. */
        duration_auction_value?: number;
        /** @description Duration auction option. Can be [**minutes**, **hours**, **days**]. */
        duration_auction_option?: string;
        /** @description The price for which you can instantly redeem your account. */
        instant_price?: number;
        /** @description If you set **cancel**, at the end of the auction with 0 bids, the account can be purchased at the price you specified as the minimum bid. Can be [**close**, **cancel**]. */
        not_bids_action?: string;
        /** @description Accounts category. */
        category_id: number;
        /** @description Using currency. Allowed values: **cny**, **usd**, **rub**, **eur**, **uah**, **kzt**, **byn** or **gbp**. */
        currency: string;
        /** @description Account origin. Where did you get it from. */
        item_origin: string;
        /** @description Guarantee type. Allowed values: **-1** - 12 hours, **0** - 24 hours, **1** - 3 days. */
        extended_guarantee: number;
        /** @description Account public description. */
        description?: string;
        /** @description Account private information (visible for buyer only if purchased). */
        information?: string;
        /** @description Account login (or email) */
        login?: string;
        /** @description Account password */
        password?: string;
        /** @description Account login data format login:password */
        login_password?: string;
        /** @description Required if a **category** is one of list of Required email login data categories. */
        has_email_login_data?: boolean;
        /** @description Required if a **category** is one of list of Required email login data categories. Email login data (login:pass format). */
        email_login_data?: string;
        /** @description Email type. Allowed values: **native**, **autoreg**. */
        email_type?: string;
        /** @description If set, the item will be closed **item_state = closed** */
        close_item?: string;
        /** @description Region. Required if you want to upload WoT, Valorant, Escape From Tarkov account. Optional if you want to upload Genshin Impact account. */
        "extra[region]"?: string;
        /** @description Service id. Required if you want to upload VPN, Cinema account. */
        "extra[service_id]"?: string;
        /** @description System. Required if you want to upload Supercell account. */
        "extra[system]"?: string;
        /** @description Discord token. Required if you want to upload Discord account. */
        "extra[ds_token]"?: string;
        /** @description VK token. Required if you want to upload VK account. */
        "extra[vk_token]"?: string;
        /** @description VK User-agent. Optional. Used only if you want to upload VK account. */
        "extra[vk_ua]"?: string;
        /** @description Login into account by token only. Used only if you want to upload VK account. */
        "extra[vk_token_auth_only]"?: boolean;
        /** @description Cookies. Required if you want to upload Youtube, Fortnite, Epic Games, Origin (EA), Social Club, Instagram, TikTok or Warface account. */
        "extra[cookies]"?: string;
        /** @description Required if you want to upload Epic Games account. */
        "extra[sc]"?: boolean;
        /** @description Required if you want to upload Origin (EA) account. */
        "extra[ItTakesTwo]"?: boolean;
        /** @description Login without cookies. Required if you want to upload Instagram account. */
        "extra[login_without_cookies]"?: boolean;
        /** @description Mfa file. Optional. Used only if you want to upload Steam account. */
        "extra[mfa_file]"?: string;
        /** @description Dota 2 MMR. Optional. Used only if you want to upload Steam account. */
        "extra[dota2_mmr]"?: string;
        /** @description EA Games. Optional. Used only if you want to upload Steam account. */
        "extra[ea_games]"?: boolean;
        /** @description Uplay Games. Optional. Used only if you want to upload Steam account. */
        "extra[uplay_games]"?: string;
        /** @description The quarry. Optional. Used only if you want to upload Steam account. */
        "extra[the_quarry]"?: string;
        /** @description Warframe. Optional. Used only if you want to upload Steam account. */
        "extra[warframe]"?: boolean;
        /** @description Ark. Optional. Used only if you want to upload Steam account. */
        "extra[ark]"?: boolean;
        /** @description Social club games. Optional. Used only if you want to upload Steam account. */
        "extra[socialclub_games]"?: string;
        /** @description Game version. Required if you want to upload Escape From Tarkov account. */
        "extra[game_version]"?: string;
        /** @description Cookie login. Optional. Used only if you want to upload TikTok account. */
        "extra[cookie_login]"?: string;
        /** @description Check channels. Used only if you want to upload Telegram account. */
        "extra[checkChannels]"?: boolean;
        /** @description Telegram client. Used only if you want to upload Telegram account. */
        "extra[telegramClient]"?: string;
        /** @description Check spam. Used only if you want to upload Telegram account. */
        "extra[checkSpam]"?: boolean;
        /** @description Allow users to ask discount for this account. */
        allow_ask_discount?: boolean;
        /** @description Using proxy id for account checking. */
        proxy_id?: number;
        /** @description Pass 1, if you get captcha in previous response. */
        random_proxy?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FastSellModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoTempMailModel"];
        };
      };
    };
  };
  /**
   * Create Account Item
   * @description Adds account on the market.
   *
   * Account origin. Where did you get it from.
   * + brute - Account received using Bruteforce
   * + fishing - Account received from fishing page
   * + stealer - Account received from stealer logs
   * + autoreg - Account is automatically registered by a tool
   * + personal - Account is yours. You created it yourself
   * + resale - Account received from another seller
   * + retrive - Account is recovered by email or phone (only for VKontakte category)
   * + dummy - Dummy (empty) account (only for Steam category)
   *
   * Required email login data categories:
   * + 9 - Fortnite
   * + 12 - Epic games
   * + 18 - Escape from Tarkov
   */
  "accountPublishing.addItem": {
    parameters: {
      query: {
        /** @description Russian title of account. If **title** specified and **title_en** is empty, **title_en** will be automatically translated to English language. */
        title?: string;
        /** @description English title of account. If **title_en** specified and **title** is empty, **title** will be automatically translated to Russian language. */
        title_en?: string;
        /** @description Account price in your currency. */
        price: number;
        /** @description Sales method. Can be [**price**, **auction**]. */
        type_sell: string;
        /** @description Duration auction value. At the end of the auction time, the item will be closed if there were no bids. */
        duration_auction_value?: number;
        /** @description Duration auction option. Can be [**minutes**, **hours**, **days**]. */
        duration_auction_option?: string;
        /** @description The price for which you can instantly redeem your account. */
        instant_price?: number;
        /** @description If you set **cancel**, at the end of the auction with 0 bids, the account can be purchased at the price you specified as the minimum bid. Can be [**close**, **cancel**]. */
        not_bids_action?: string;
        /** @description Accounts category. */
        category_id: number;
        /** @description Using currency. Allowed values: **cny**, **usd**, **rub**, **eur**, **uah**, **kzt**, **byn** or **gbp**. */
        currency: string;
        /** @description Account origin. Where did you get it from. */
        item_origin: string;
        /** @description Guarantee type. Allowed values: **-1** - 12 hours, **0** - 24 hours, **1** - 3 days. */
        extended_guarantee: number;
        /** @description Account public description. */
        description?: string;
        /** @description Account private information (visible for buyer only if purchased). */
        information?: string;
        /** @description Required if a **category** is one of list of Required email login data categories. */
        has_email_login_data?: boolean;
        /** @description Required if a **category** is one of list of Required email login data categories. Email login data (login:pass format). */
        email_login_data?: string;
        /** @description Email type. Allowed values: **native**, **autoreg**. */
        email_type?: string;
        /** @description Allow users to ask discount for this account. */
        allow_ask_discount?: boolean;
        /** @description Using proxy id for account checking. */
        proxy_id?: number;
        /** @description Pass 1, if you get captcha in previous response. */
        random_proxy?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AddItemModel"];
        };
      };
    };
  };
  /**
   * Check Not Published Acc (Get temp email for acccount)
   * @description Check and put up to sale not published account OR update account information existing account.
   */
  "accountsPublishing.checkNotPublic": {
    parameters: {
      query?: {
        /** @description Account login (or email) */
        login?: string;
        /** @description Account password */
        password?: string;
        /** @description Account login data format login:password */
        login_password?: string;
        /** @description If set, the item will be closed **item_state = closed** */
        close_item?: number;
        /** @description Region. Required if you want to upload WoT, Valorant, Escape From Tarkov account. Optional if you want to upload Genshin Impact account. */
        "extra[region]"?: string;
        /** @description Service id. Required if you want to upload VPN, Cinema account. */
        "extra[service_id]"?: string;
        /** @description System. Required if you want to upload Supercell account. */
        "extra[system]"?: string;
        /** @description Discord token. Required if you want to upload Discord account. */
        "extra[ds_token]"?: string;
        /** @description VK token. Required if you want to upload VK account. */
        "extra[vk_token]"?: string;
        /** @description VK User-agent. Used only if you want to upload VK account. */
        "extra[vk_ua]"?: string;
        /** @description Login into account by token only. Used only if you want to upload VK account. */
        "extra[vk_token_auth_only]"?: boolean;
        /** @description Cookies. Required if you want to upload Youtube, Fortnite, Epic Games, Origin (EA), Social Club, Instagram, TikTok or Warface account. */
        "extra[cookies]"?: string;
        /** @description Required if you want to upload Epic Games account. */
        "extra[sc]"?: boolean;
        /** @description Required if you want to upload Origin (EA) account. */
        "extra[ItTakesTwo]"?: boolean;
        /** @description Login without cookies. Required if you want to upload Instagram account. */
        "extra[login_without_cookies]"?: boolean;
        /** @description Mfa file. Optional. Used only if you want to upload Steam account. */
        "extra[mfa_file]"?: string;
        /** @description Dota 2 MMR. Optional. Used only if you want to upload Steam account. */
        "extra[dota2_mmr]"?: string;
        /** @description EA Games. Optional. Used only if you want to upload Steam account. */
        "extra[ea_games]"?: boolean;
        /** @description Uplay Games. Optional. Used only if you want to upload Steam account. */
        "extra[uplay_games]"?: string;
        /** @description The quarry. Optional. Used only if you want to upload Steam account. */
        "extra[the_quarry]"?: string;
        /** @description Warframe. Optional. Used only if you want to upload Steam account. */
        "extra[warframe]"?: boolean;
        /** @description Ark. Optional. Used only if you want to upload Steam account. */
        "extra[ark]"?: boolean;
        /** @description Social club games. Optional. Used only if you want to upload Steam account. */
        "extra[socialclub_games]"?: string;
        /** @description Game version. Required if you want to upload Escape From Tarkov account. */
        "extra[game_version]"?: string;
        /** @description Cookie login. Optional. Used only if you want to upload TikTok account. */
        "extra[cookie_login]"?: string;
        /** @description Check channels. Used only if you want to upload Telegram account. */
        "extra[checkChannels]"?: boolean;
        /** @description Telegram client. Used only if you want to upload Telegram account. */
        "extra[telegramClient]"?: string;
        /** @description Check spam. Used only if you want to upload Telegram account. */
        "extra[checkSpam]"?: boolean;
        /** @description Put if you are trying to resell an account. */
        resell_item_id?: number;
        /** @description Pass 1, if you get **captcha** in previous response */
        random_proxy?: number;
      };
      path: {
        /** @description Item id */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MoneyTransferModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Info Not Published Acc
   * @description Get info about not published item. For categories, which required temporary email (Steam, Social Club), you will get temporary email in response.
   */
  "accountsPublishing.getInfoNotPublic": {
    parameters: {
      query?: {
        /** @description Put item id, if you are trying to resell item. This is useful to pass temporary email from reselling item to new item. You will get same temporary email from reselling account. */
        resell_item_id?: number;
      };
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AddGoodsModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Categories
   * @description Display category list.
   */
  "accountsPublishing.getCategories": {
    parameters: {
      query?: {
        /** @description Display top queries for per category. */
        top_queries?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Categories"];
        };
      };
    };
  };
  /**
   * Get Mafile Json
   * @description Returns mafile in JSON. Warning: this action is cancelling active account guarantee.
   */
  "accountsManaging.getMafileJSON": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MaFileModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Email Confirmation Code
   * @description Gets confirmation code or link.
   */
  "accountsManaging.getEmailCode": {
    parameters: {
      query: {
        /** @description Account email */
        email: string;
      };
      path: {
        /** @description Item id */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfCodeModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["SoldItemModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Mafile Confirmation Code
   * @description Gets confirmation code from MaFile (Only for Steam accounts).
   */
  "accountsManaging.getMafileCode": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfCodeModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Telegram Confirmation Code
   * @description Gets confirmation code from Telegram.
   */
  "accountsManaging.getTelegramCode": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TgCodeModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Telegram Reset Auth
   * @description Resets Telegram authorizations.
   */
  "accountsManaging.telegramResetAuth": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveChangesModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Cancel Guarantee Acc
   * @description Cancel guarantee of account. It can be useful for account reselling.
   */
  "accountsManaging.cancelGuarantee": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveChangesModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Change Password
   * @description Changes password of account.
   */
  "accountsManaging.changePassword": {
    parameters: {
      query?: {
        /** @description Cancel change password recommendation. It will be helpful, if you don't want to change password and get login data */
        _cancel?: number;
      };
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ChangePasswordModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Password Temp Email
   * @description Gets password from temp email of account. After calling of this method, the warranty will be cancelled and you cannot automatically resell account.
   */
  "accountsManaging.getPasswordEmail": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TempEmailPasswordModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Edit Account
   * @description Edits any details of account.
   *
   * Account origin. Where did you get it from.
   * + brute - Account received using Bruteforce
   * + fishing - Account received from fishing page
   * + stealer - Account received from stealer logs
   * + autoreg - Account is automatically registered by a tool
   * + personal - Account is yours. You created it yourself
   * + resale - Account received from another seller
   * + retrive - Account is recovered by email or phone (only for VKontakte category)
   * + dummy - Dummy (empty) account (only for Steam category)
   */
  "accountsManaging.edit": {
    parameters: {
      query?: {
        /** @description Russian title of account. If **title** specified and **title_en** is empty, **title_en** will be automatically translated to English language. */
        title?: string;
        /** @description English title of account. If **title_en** specified and **title** is empty, **title** will be automatically translated to Russian language. */
        title_en?: string;
        /** @description Account price in your currency. */
        price?: number;
        /** @description Using currency for amount. Required if you are trying to change price field. Allowed values: **cny**, **usd**, **rub**, **eur**, **uah**, **kzt**, **byn**, **gbp** */
        currency?: string;
        /** @description Account origin. Where did you get it from. */
        item_origin?: string;
        /** @description Account public description. */
        description?: string;
        /** @description Account private information (visible for buyer only if purchased). */
        information?: string;
        /** @description Email login data (login:pass format). */
        email_login_data?: string;
        /** @description Email type. Allowed values: **native**, **autoreg**. */
        email_type?: string;
        /** @description Allow users to ask discount for this account. */
        allow_ask_discount?: number;
        /** @description Using proxy id for account checking. See GET or POST /proxy to get or edit proxy list. */
        proxy_id?: number;
      };
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveChangesModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Add Tag Account
   * @description Adds tag for the account.
   */
  "accountsManaging.addTag": {
    parameters: {
      query: {
        /** @description Tag id (Tag list is available via **GET /me**). */
        tag_id: number;
      };
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AddTagModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Delete Tag Account
   * @description Deletes tag for the account.
   */
  "accountsManaging.deleteTag": {
    parameters: {
      query: {
        /** @description Tag id (Tag list is available via **GET /me**). */
        tag_id: number;
      };
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AddTagModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["TagNotFoundModel"];
        };
      };
    };
  };
  /**
   * Bumps Account
   * @description Bumps account in the search.
   */
  "accountsManaging.bump": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MoneyTransferModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Add Favorite
   * @description Adds account to favourites.
   */
  "accountsManaging.addFavorite": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MoneyTransferModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Delete Favorite
   * @description Deletes account from favourites.
   */
  "accountsManaging.deleteFavorite": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveChangesModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Stick Account
   * @description Stick account in the top of search.
   */
  "accountsManaging.stick": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveChangesModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Unstick Account
   * @description Unstick account of the top of search.
   */
  "accountsManaging.unstick": {
    parameters: {
      path: {
        /** @description Item id. */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveChangesModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Change Account Owner
   * @description Change of account owner.
   */
  "accountsManaging.changeOwner": {
    parameters: {
      query: {
        /** @description The username of the new account owner */
        username: string;
        /** @description Secret answer of your account */
        secret_answer: string;
      };
      path: {
        /** @description Item id */
        itemId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveChangesModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["NoPermissionModel"];
        };
      };
      /** @description Error Response */
      404: {
        content: {
          "application/json": components["schemas"]["AdNotFoundModel"];
        };
      };
    };
  };
  /**
   * Get Profile Market
   * @description Displays info about your profile.
   */
  "marketProfileSettings.getInfo": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MeModel"];
        };
      };
    };
  };
  /**
   * Edit Settings Market
   * @description Change settings about your profile on the market.
   */
  "marketProfileSettings.getSettings": {
    parameters: {
      query?: {
        /** @description Disable Steam Guard on account purchase moment */
        disable_steam_guard?: boolean;
        /** @description Allow users ask discount for your accounts */
        user_allow_ask_discount?: boolean;
        /** @description Maximum discount percents for your accounts */
        max_discount_percent?: number;
        /** @description Usernames who can transfer market accounts to you. Separate values with a comma. */
        allow_accept_accounts?: string;
        /** @description Hide your profile info when you add an account to favorites */
        hide_favourites?: boolean;
        /** @description Vkontakte user agent. */
        vk_ua?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveChangesModel"];
        };
      };
    };
  };
  /**
   * Get Proxy
   * @description Gets your proxy list.
   */
  "proxySettings.get": {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProxyModel"];
        };
      };
    };
  };
  /**
   * Add Proxy
   * @description Add single proxy or proxy list.
   *
   *
   * To add single proxy use this parameters:
   *
   *
   * + **proxy_ip** (required) - proxy ip or host
   * + **proxy_port** (required) - proxy port
   * + **proxy_user** (optional) - proxy username
   * + **proxy_pass** (optional) - proxy password
   *
   * To add proxy list use this parameters:
   *
   *
   * + **proxy_row** (required) - proxy list in String format ip:port:user:pass. Each proxy must be start with new line (use
   *  separator)
   */
  "proxySettings.add": {
    parameters: {
      query?: {
        /** @description Proxy ip or host. Required if **proxy_row** is not specified. */
        proxy_ip?: string;
        /** @description Proxy port. Required if **proxy_row** is not specified. */
        proxy_port?: number;
        /** @description Proxy username. Required if **proxy_row** is not specified. */
        proxy_user?: string;
        /** @description Proxy password. Required if **proxy_row** is not specified. */
        proxy_pass?: string;
        /**
         * @description Proxy list in String format ip:port:user:pass. Each proxy must be start with new line (use
         *  separator)
         */
        proxy_row?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveChangesModel"];
        };
      };
      /** @description Error Response */
      400: {
        content: {
          "application/json": components["schemas"]["IncorrectProxyModel"];
        };
      };
    };
  };
  /**
   * Delete Proxy
   * @description Delete single or all proxies.
   */
  "proxySettings.delete": {
    parameters: {
      query?: {
        /** @description Id of an existing proxy */
        proxy_id?: number;
        /** @description True. If you want to delete all proxy */
        delete_all?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveChangesModel"];
        };
      };
      /** @description Error Response */
      403: {
        content: {
          "application/json": components["schemas"]["ProxyNotFoundModel"];
        };
      };
    };
  };
  /**
   * Batch
   * @description Execute multiple API requests at once (Separated by comma). Maximum batch jobs is 10.
   *
   * Required scopes:
   * + Same as called API requests.
   */
  "batchRequests.execute": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["JobsModel"];
        };
      };
      /** @description Error Response */
      400: {
        content: {
          "application/json": components["schemas"]["InvalidBatchModel"];
        };
      };
    };
  };
}
